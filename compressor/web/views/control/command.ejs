<!DOCTYPE html>
<html>
  <head>
    <!-- Default Js -->
    <%- include("../master/head.ejs") %>
    <!-- 동적 돔 생성을 위한 Library -->
    <script src="/js/handlebars.min.js"></script>

    <!-- SVG Map 을 생성하기 위한 필수 Library -->
    <link href="/css/template/svg.filter.css" rel="stylesheet" />
    <script src="/js/svg/svg.js"></script>

    <!-- SVG Map을 생성하고 관리하기 위한 Core Library -->
    <script src="/socket.io/socket.io.js"></script>

    <!-- Custom 제어 Confirm 창 구현을 위한 Library -->
    <link rel="stylesheet" href="/css/jquery-ui.css" />
    <script src="/js/jquery-ui.min.js"></script>
  </head>

  <!-- 서버사이드 데이터 정의 -->
  <script>
    // Map 정보
    var map = <%- JSON.stringify(map) %>;
    // 세션 ID
    var sessionID = <%- JSON.stringify(sessionID) %>;
    // 로그인 사용자 정보
    var user = <%- JSON.stringify(user) %>;
  </script>

  <body>
    <div id="wrap" class="wrap">
      <!--메인-->
      <div class="container_body hidden" id="container_body">
        <%- include("./confirmCommand.ejs") %>
        <!-- Content -->
        <div id="controlContent">
          <!-- Svg Map -->
          <div class="" id="structure">
            <%- include("./plugInMapControlBox.ejs") %>
            <!-- SVG canvas -->
            <div class="svg_area" id="canvas">
              <%- include('../master/filter.ejs') %> <%-
              include('../master/filter.btn.ejs') %>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Map 데이터를 기반으로 SVG를 생성 및 관리할 Module -->
    <script src="/js/drawSvg/drawSvg-base.js"></script>

    <!-- 제어 및 Socket.IO 이벤트 바인딩 -->
    <script>
      const socket = io();

      function bindingSocketEmit() {
        // 서버로 명령 취소 요청
        $('#cmdTableBody').on('click', 'button[name="reqCancelCmd"]', () => {
          const wrapCmdUUID = $('button[name="reqCancelCmd"]')
            .parentsUntil('tr')
            .parent()
            .data('uuid');

          socket.emit('cancelCommand', wrapCmdUUID) && $('#cmdGoalArea').html('');
        });

        // 제어 관리 js 세팅 및 바인딩
        $('#operationModeSel').on('change', function () {
          const selectedAlgorithmId = $('#operationModeSel option:selected').val();
          // var modeName = $('#operationModeSel option:selected').text();
          // alert('운영 모드(' + modeName + ')를 변경하였습니다.');

          // 제어 모드 변경 요청
          socket.emit('changeOperationMode', selectedAlgorithmId);
        });
      }

      function bindingSocketOn() {
        // 인증 요청을 받으면 수행
        socket.on('authSocket', () => {
          socket.emit('authSocket', {
            sessionID: sessionID,
            sessionUserInfo: user,
          });
        });

        // 명령 요청 결과 Alert
        socket.on('resultExecCommand', message => {
          document.getElementById('resultExecCommand').innerText = message;
        });

        // 장치 연결 상태 반영
        socket.on('updateIsApiClientConn', isConn => {
          // console.log('updateIsApiClientConn', isConn);
          var connStatusImg =
            isConn === true ? '/image/connection.png' : '/image/disconnection.png';

          if (isConn === true) {
            $('#updateIsApiClientConnImg').addClass('btn-success');
            $('#updateIsApiClientConnImg').removeClass('btn-danger');
          } else {
            $('#updateIsApiClientConnImg').removeClass('btn-success');
            $('#updateIsApiClientConnImg').addClass('btn-danger');
          }
        });

        // 갱신 노드 반영 {ni: NodeId, ntn: Node Target Name, d: data, pnl: Place Target Name}[]
        socket.on('updateNode', (wsNodeList = []) => {
          //   console.log(wsNodeList);
          wsNodeList.forEach(wsNodeInfo => {
            showNodeData(wsNodeInfo.ni, wsNodeInfo.d);
          });
        });

        // 명령 관련 갱신 반영
        const runSoundPlay = waitSoundPlay();
        socket.on('updateCommand', (commandList = []) => {
          // console.log('commandList', commandList);

          runSoundPlay(commandList);

          updateCommand(commandList);
        });

        // 서버로 명령 실행 요청한 결과 알림
        socket.on('updateAlert', function (message) {
          alert(message);
        });
      }

      // 시스템 가동일 경우 소리 재생 관리 함수
      function waitSoundPlay() {
        let isWait = false;

        return commandList => {
          let isExistTrigger = false;
          // 시스템 가동일 경우 소리
          if (_.findIndex(commandList, { wrapCmdId: 'systemOn' }) >= 0) {
            isExistTrigger = true;
            isWait = true;
          }

          // console.log('isWait', isWait);
          if (isWait === true && isExistTrigger === false) {
            isWait = false;
            console.log('@@@@@', isWait, isExistTrigger);
            if (isAudioMuted) {
              $('#audioBtn').focus();
              alert('소리 재생 권한을 허용해주세요');
            } else {
              document.getElementById('audioPlayer').play();
            }
          }
        };
      }

      // SVG Device click을 통한 제어
      function reqSingleControl(nodeId, singleControlType, controlSetValue) {
        socket.emit('executeCommand', {
          // 기본 값은 명령 요청
          nodeId,
          singleControlType,
          controlSetValue,
        });
      }

      // 명령 요청
      function reqCommandControl(wsGenerateControlCmdAPI) {
        socket.emit('executeCommand', wsGenerateControlCmdAPI);
      }

      // Browser >>> Server 이벤트 바인딩
      bindingSocketEmit();
      // Server >>>  Browser 이벤트 바인딩
      bindingSocketOn();

      // FIXME: TEXT 종료 후 삭제
      $(document).ready(function () {
        const thisSelectValue = 'SINGLE';
        // const thisSelectValue = CF_SET;
        // const thisSelectValue = CF_FLOW;
        // const thisSelectValue = CF_SCENARIO;

        // 명령 형식 변경
        $('#cmdFormatSel').val(thisSelectValue).trigger('change');
      });
    </script>

    <!-- SVG Map 세팅 -->
    <script>
      initDrawSvg();

      // 캔버스 생성
      const svgCanvas = SVG().addTo(`#canvas`).size('100%', '100%');
      // SVG Canvas 속성 정의
      svgCanvas.attr({
        id: 'svgCanvas',
        class: 'svg_map',
        preserveAspectRatio: 'xMidYMin meet',
      });

      // defs Element를 SVG Element 자식 요소 최상위로 정의
      svgCanvas.defs();
      // string으로 변환하여 붙여넣음. Dom 요소로 붙여넣을 경우 동작하지 않음
      $('defs').html($('#svgFilter').html() + $('#svgBtnFilter').html());
      // id 중복을 막기위한 filter 요소 삭제
      document.querySelector('#svgFilter').remove();
      document.querySelector('#svgBtnFilter').remove();

      drawSvgBasePlace(svgCanvas); // 멥 그리기

      // FIXME: TEST 용
      // setTimeout(() => {
      //   runSimulator();
      // }, 100);
      // console.log(wsPlaceRelList);
      // console.log(mdPlaceStorage);
    </script>

    <!-- 상단 카테고리 버튼 세팅 -->
    <script>
      // 데이터 뷰 버튼 선택에 따라 보여지는 View 분기 처리
      $('input[name="contentTypeBtn"]').on('click', function () {
        var viewType = $(this).data('view');

        // 버튼 색상 변경
        $('#contentTypeCategory')
          .children('input')
          .each(function (index, inputElement) {
            var currDataView = $(inputElement).data('view');
            if (currDataView === viewType) {
              $(this).addClass('btn-danger');
              $(this).removeClass('btn-default');
            } else {
              $(this).removeClass('btn-danger');
              $(this).addClass('btn-default');
            }
          });

        // 선택한 데이터 뷰 선택 값에 따라 hidden 설정
        $('#controlContent')
          .children('div')
          .each(function (index, domElement) {
            if (domElement.id === viewType) {
              $(`#${domElement.id}`).removeClass('hidden');
            } else {
              $(`#${domElement.id}`).addClass('hidden');
            }
          });
      });
    </script>

    <script>
      $(document).ready(() => {
        $('#container_body').removeClass('hidden');
      });
    </script>
  </body>
</html>
